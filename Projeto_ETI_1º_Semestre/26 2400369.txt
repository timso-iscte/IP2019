PandionJ Error Report

java.lang.NullPointerException : null

Exception trace: 

pt.iscte.pandionj.model.StackFrameModel.isException(StackFrameModel.java:194)
pt.iscte.pandionj.model.StackFrameModel.handleVar(StackFrameModel.java:211)
pt.iscte.pandionj.model.StackFrameModel.handleVariables(StackFrameModel.java:159)
pt.iscte.pandionj.model.StackFrameModel.update(StackFrameModel.java:125)
pt.iscte.pandionj.model.RuntimeModel.updateActiveStack(RuntimeModel.java:110)
pt.iscte.pandionj.model.RuntimeModel.update(RuntimeModel.java:84)
pt.iscte.pandionj.PandionJView.handleFrames(PandionJView.java:313)
pt.iscte.pandionj.PandionJView.access$2(PandionJView.java:290)
pt.iscte.pandionj.PandionJView$DebugListener.lambda$0(PandionJView.java:186)
pt.iscte.pandionj.PandionJView.executeInternal(PandionJView.java:327)
pt.iscte.pandionj.extensibility.PandionJUI.lambda$1(PandionJUI.java:136)
org.eclipse.swt.widgets.RunnableLock.run(RunnableLock.java:40)
org.eclipse.swt.widgets.Synchronizer.runAsyncMessages(Synchronizer.java:185)
org.eclipse.swt.widgets.Display.runAsyncMessages(Display.java:3933)
org.eclipse.swt.widgets.Display.readAndDispatch(Display.java:3564)
org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine$5.run(PartRenderingEngine.java:1173)
org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
org.eclipse.e4.ui.internal.workbench.swt.PartRenderingEngine.run(PartRenderingEngine.java:1062)
org.eclipse.e4.ui.internal.workbench.E4Workbench.createAndRunUI(E4Workbench.java:156)
org.eclipse.ui.internal.Workbench.lambda$3(Workbench.java:628)
org.eclipse.core.databinding.observable.Realm.runWithDefault(Realm.java:339)
org.eclipse.ui.internal.Workbench.createAndRunWorkbench(Workbench.java:563)
org.eclipse.ui.PlatformUI.createAndRunWorkbench(PlatformUI.java:151)
org.eclipse.ui.internal.ide.application.IDEApplication.start(IDEApplication.java:155)
org.eclipse.equinox.internal.app.EclipseAppHandle.run(EclipseAppHandle.java:199)
org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.runApplication(EclipseAppLauncher.java:137)
org.eclipse.core.runtime.internal.adaptor.EclipseAppLauncher.start(EclipseAppLauncher.java:107)
org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:391)
org.eclipse.core.runtime.adaptor.EclipseStarter.run(EclipseStarter.java:246)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(Unknown Source)
sun.reflect.DelegatingMethodAccessorImpl.invoke(Unknown Source)
java.lang.reflect.Method.invoke(Unknown Source)
org.eclipse.equinox.launcher.Main.invokeFramework(Main.java:659)
org.eclipse.equinox.launcher.Main.basicRun(Main.java:595)
org.eclipse.equinox.launcher.Main.run(Main.java:1501)
Error code: 2400369

User code: 

class StackGraphic {

	private final int MAXSTACK = 10;
	public Graphic[] stack = new Graphic[MAXSTACK];
	private int next = 0;

	StackGraphic(Graphic graphic) {
		this.stack[0] = graphic;
		next++;
	}

//função para manter todas as posições ocupadas seguindo o vetor (a começar em stack[0], sem posiçoes intermediarias null ate stack[MAXSTACK])
	void shift(Graphic[] vec) {
		for (int i = 0; i != vec.length - 1; i++) {
			if (vec[i] == null) {
				vec[i] = vec[i + 1];
				vec[i + 1] = null;
			}
		}
	}

//função para indicar o  primeiro indice do stack que está vazio
	/*
	 * int next() { for (int i = MAXSTACK - 1; i >= 0; i--) { if (this.stack[i] ==
	 * null) next = i; } if (next >= 0 && next < MAXSTACK) {
	 *
	 * } else next = -1;
	 *
	 * return next; }
	 */
	boolean isFull() {
		if (next >= MAXSTACK) {
			return true;
		} else
			return false;
	}

	boolean isEmpty() {
		if (next == 0) {
			return true;
		} else
			return false;
	}

	StackGraphic(Graphic[] graphicVec) {
		if (graphicVec.length <= MAXSTACK) {
			for (int i = 0; i != graphicVec.length; i++) {
				this.stack[i] = graphicVec[i];
				next++;
			}
			shift(this.stack);
		} else
			throw new IllegalArgumentException(
					"Invalid vector length: " + graphicVec.length + " vector length should be < " + MAXSTACK + "");
	}

	void addStack(Graphic[] graphicVec) {
		shift(this.stack);
		if (this.isFull() == false) {
			int j = 0; // para iterar o grafico dado
			for (int i = 0; i != MAXSTACK; i++) {
				if (this.stack[i] == null) {
					this.stack[i] = graphicVec[j];
					j++;
					next++;
				}
			}
			shift(this.stack);
		} else
			throw new IllegalStateException("The stack is full");
	}

	void addToTop(Graphic graphic) {
		if (this.isFull() == false) {
			this.stack[next] = graphic;
			next++;
		} else
			throw new IllegalStateException("the stack is full");
	}

	void removeTop() {
		if (this.isEmpty() == false) {
			this.stack[next - 1] = null;
			next--;
		} else
			throw new IllegalStateException("The stack is empty");
	}

	Graphic getTop() {
		if (next > 0) {
			return this.stack[next - 1];
		} else
			throw new IllegalStateException("The stack is empty");
	}

	void addToPosition(int position, Graphic graphic) {
		if (this.isFull() == false) {
			if (position < next) {
				for (int i = MAXSTACK - 1; i >= position; i--) {
					this.stack[i] = this.stack[i - 1];
				}
				this.stack[position] = graphic;
				next++;
			} else
				throw new IllegalArgumentException("The postition should be inferior to the top of the stack");
		} else
			throw new IllegalStateException("This stack is full");

	}

	void changeTwoPositions(int position1, int position2) {
		if (this.stack[position1] != null && this.stack[position2] != null) {
			Graphic c = this.stack[position1];
			this.stack[position1] = this.stack[position2];
			this.stack[position2] = c;
		}
	}

	Graphic[] getNoTitle() {
		int x = 0;
		for (int i = 0; i != next; i++) {
			if (stack[i].getGraphicTitle() == null) {
				x++;
			}
		}
		Graphic[] noTitleVec = new Graphic[x];
		int j = 0;
		for (int i = 0; i != next; i++) {
			if (stack[i].getGraphicTitle() == null) {
				noTitleVec[j++] = this.stack[i];
			}
		}
		return noTitleVec;
	}

	boolean isNull(Graphic[] vec, int a) {
		if (vec[a].getGraphicTitle() == null) {
			return true;
		} else
			return false;
	}

	Graphic[] getAlphabeticOrder() {
		Graphic[] orderVec = new Graphic[next];
		for (int i = 0; i != next; i++)
			orderVec[i] = this.stack[i];
		int x = 0;
		for (int i = 0; i != orderVec.length; i++) {
			if (isNull(orderVec, i) == true) {
				Graphic p = orderVec[i];
				orderVec[i] = null;
				shift(orderVec);
				orderVec[orderVec.length - 1] = p;
				x++; // para contar os nulls que vão para o fim do vetor
			}
		}
		for (int i = 0; i != next - x; i++) {
			for (int j = i + 1; j < next - x; j++) {
				String si = stack[i].getGraphicTitle();
>>>>				String sj = stack[j].getGraphicTitle();
				// if (si != null && sj != null)
				if (si.charAt(0) > sj.charAt(0)) {
					Graphic a = orderVec[i];
					orderVec[i] = orderVec[j];
					orderVec[j] = a;
				}
			}
		}

		return orderVec;
	}

//função teste
	private static Graphic a = new Graphic(StaticClass.testCreateGraphic(), "palala", "", "");
	private static Graphic b = new Graphic(StaticClass.testCreateGraphicGradient(), "nalala", "", "");
	private static Graphic c = new Graphic(StaticClass.testCreateDispersionGraphic(), "maaza", "", "");
	private static Graphic d = new Graphic(StaticClass.testCreateDispersionGraphic());
	private static Graphic[] v = { a, a, a, a, a, a, a, a, a };
	private static Graphic[] u = { b, b, b, b, b, b, b, b, b };
	private static Graphic[] z = { b, a, b, a, b, a, b, b, b };
	private static Graphic[] p = { b, a, b, a, a, c };
	private static Graphic[] k = { d, a, b, c };

	static void test() {

		StackGraphic g = new StackGraphic(k);
//		g.addStack(v);
//		g.removeTop();
//		g.addToPosition(7, c);
//		g.getNoTitle();
		g.getAlphabeticOrder();
		return;
	}
}


Call stack:

test()
getAlphabeticOrder()

